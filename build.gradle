
plugins {
    id "groovy"
    id "org.grails.grails-web"
    id "org.grails.grails-gsp"
    id "com.github.erdi.webdriver-binaries"
    id "war"
    id "idea"
    id "com.bertramlabs.asset-pipeline"
    id "application"
    id "eclipse"
    id 'java'
    id "com.yupzip.wsdl2java" version "3.0.0"
}

group = "bookBackend"

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
}

//configurations {
//    jaxws
//    configureEach {
//        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//            if (details.requested.group == 'org.seleniumhq.selenium') {
//                details.useVersion('4.19.1')
//            }
//        }
//    }
//}

dependencies {
    implementation("org.grails:grails-core")
    implementation("org.grails:grails-logging")
    implementation("org.grails:grails-plugin-databinding")
    implementation("org.grails:grails-plugin-i18n")
    implementation("org.grails:grails-plugin-interceptors")
    implementation("org.grails:grails-plugin-rest")
    implementation("org.grails:grails-plugin-services")
    implementation("org.grails:grails-plugin-url-mappings")
    implementation("org.grails:grails-web-boot")
    implementation("org.grails.plugins:gsp")
    implementation("org.grails.plugins:hibernate5")
    implementation("org.grails.plugins:scaffolding")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-tomcat")
    implementation("org.springframework.boot:spring-boot-starter-validation")
//    implementation ("org.grails.plugins:spring-security-core:5.1.0")
    implementation("org.grails.plugins:mail:4.0.0")
    implementation("org.grails.plugins:quartz:3.0.0")
    implementation('com.mysql:mysql-connector-j:8.2.0')
    implementation('org.grails.plugins:cxf:3.1.2')
    implementation( "com.yupzip:wsdl2java:3.0.0")
//    apache cxf plugins
//    implementation ('org.apache.cxf:cxf-rt-core:2.7.18')  // Adjust version as needed
//    implementation('org.apache.cxf:cxf-rt-ws-security:3.4.5')
    implementation('org.apache.cxf:cxf-rt-frontend-jaxws:3.4.5')
//    implementation( "org.apache.cxf:cxf-rt-transports-http:3.0.0")
//    implementation( "org.apache.cxf:cxf-rt-wsdl:3.2.8")
//     JAXB & JAX-WS
//    implementation('jakarta.xml.bind:jakarta.xml.bind-api:3.0.1')
//    implementation('org.glassfish.jaxb:jaxb-runtime:3.0.1')
//    implementation('jakarta.xml.ws:jakarta.xml.ws-api:3.0.1')
//    implementation('com.sun.xml.ws:jaxws-rt:3.0.1')
//    implementation('com.sun.xml.ws:jaxws-tools:3.0.1')
//     For JAX-WS related tasks
//    jaxws('com.sun.xml.ws:jaxws-rt:3.0.1')
//    jaxws('com.sun.xml.ws:jaxws-tools:3.0.1')
    compileOnly("io.micronaut:micronaut-inject-groovy")
    console("org.grails:grails-console")
    runtimeOnly("com.bertramlabs.plugins:asset-pipeline-grails:4.3.0")
    runtimeOnly("org.apache.tomcat:tomcat-jdbc")
    runtimeOnly("org.fusesource.jansi:jansi:1.18")
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.grails:grails-gorm-testing-support")
    testImplementation("org.grails:grails-web-testing-support")
    testImplementation("org.grails.plugins:geb")
    testImplementation("org.seleniumhq.selenium:selenium-api:4.19.1")
    testImplementation("org.seleniumhq.selenium:selenium-remote-driver:4.19.1")
    testImplementation("org.seleniumhq.selenium:selenium-support:4.19.1")
    testImplementation("org.spockframework:spock-core")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-chrome-driver:4.19.1")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-firefox-driver:4.19.1")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-safari-driver:4.19.1")
    testImplementation("io.micronaut:micronaut-http-client")

}

application {
    mainClass.set("bookBackend.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
}
webdriverBinaries {
    chromedriver '122.0.6260.0'
    geckodriver '0.33.0'
    //iedriverserver '3.141.59'
    edgedriver '110.0.1587.57'
}
assets {
    minifyJs = true
    minifyCss = true
}
wsdl2java {
    wsdlDir= file("src/main/wsdl")
    wsdlsToGenerate = [
            ['C:\\Users\\DELL\\bookBackend\\src\\new\\wsdl\\showBook.wsdl']
    ]
    locale = locale.getDefault()
    cxfVersion = "3.2.0"
    cxfPluginVersion = "3.2.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        java {
            srcDirs += ['src/main/generated']
        }
    }
}